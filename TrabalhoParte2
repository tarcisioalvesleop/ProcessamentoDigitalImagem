# Equalização de histograma (numero 6)
import cv2
import numpy as np
from matplotlib import pyplot as plt

#carregando a imagem
img = cv2.imread('fig6.png')
img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

#equalizando a imagem
h_eq = cv2.equalizeHist(img)

cv2.imshow("Imagem Original", img)
cv2.imshow("Imagem Equalizada", h_eq)

plt.show()
cv2.waitKey(0)
cv2.destroyAllWindows()


# Meu primeiro buscador de imagens! (Numero 7)

import cv2
import numpy as np
from matplotlib import pyplot as plt
from math import *

#carregando as imagens e transformando para HSV
s1 = cv2.imread("s1.jpg")
s2 = cv2.imread("s2.jpg")
d1 = cv2.imread("d1.jpg")
d2 = cv2.imread("d2.jpg")
d3 = cv2.imread("d3.jpg")
hsvS1 = cv2.cvtColor(s1, cv2.COLOR_BGR2HSV)
hsvS2 = cv2.cvtColor(s2, cv2.COLOR_BGR2HSV)
hsvD1 = cv2.cvtColor(d1, cv2.COLOR_BGR2HSV)
hsvD2 = cv2.cvtColor(d2, cv2.COLOR_BGR2HSV)
hsvD3 = cv2.cvtColor(d3, cv2.COLOR_BGR2HSV)

#definindo a função que vai comparar os histograma
def comparacao_histograma (hsv_S1, hsv_img):
  
  h_bins = 50
  s_bins = 60
  histSize = [h_bins, s_bins]

  h_ranges = [0, 180]
  s_ranges = [0, 256]
  ranges = h_ranges + s_ranges 

  channels = [0, 1]

  #calculando os histogramas e suas normalizações
  hist_S1 = cv2.calcHist([hsv_S1], channels, None, histSize, ranges, accumulate=False)
  cv2.normalize(hist_S1, hist_S1, alpha=0, beta=1, norm_type=cv2.NORM_MINMAX)
  
  hist_img = cv2.calcHist([hsv_img], channels, None, histSize, ranges, accumulate=False)
  cv2.normalize(hist_img, hist_img, alpha=0, beta=1, norm_type=cv2.NORM_MINMAX)
  
  #comparação entre s1 e as imagens usando as metricas
  img = np.zeros(4)
  for metricas in range(4):
    img[metricas] = cv2.compareHist(hist_S1, hist_img, metricas)
  
  return img;

#definindo a função que calcula a soma das distancias
def soma(compareHist):
  return sqrt((compareHist[0]*compareHist[0])+(compareHist[1]*compareHist[1])+(compareHist[3]*compareHist[3]))

#definindo a função que verifica a distância
def distancias(distancia):
  return distancia.min()

#comparando os histograms e mostrando as métricacs de comparação na tela
comparandoS1S2 = comparacao_histograma(s1, s2)
print("Métricas de comparação S1 E S2")
print("Correlação: ", comparandoS1S2 [0])
print("Chi-Square: ", comparandoS1S2 [1])
print("Bhattacharrya: ",comparandoS1S2 [3])
print("")

comparandoS1D1 = comparacao_histograma(s1, d1)
print("Métricas de comparação S1 E D1")
print("Correlação:: ", comparandoS1D1 [0])
print("Chi-Square: ", comparandoS1D1[1])
print("Bhattacharrya: ", comparandoS1D1[3])
print("")

comparandoS1D2 = comparacao_histograma(s1, d2)
print("Métricas de comparação S1 E D2")
print("Correlação:: ", comparandoS1D2 [0])
print("Chi-Square: ", comparandoS1D2[1])
print("Bhattacharrya: ", comparandoS1D2[3])
print("")

comparandoS1D3 = comparacao_histograma(s1, d3)
print("Métricas de comparação S1 E D3")
print("Correlação:: ", comparandoS1D3[0])
print("Chi-Square: ", comparandoS1D3[1])
print("Bhattacharrya: s", comparandoS1D3[3])
print("")

#calculando as distâncias
distancia = np.zeros(4)
distancia[0] = soma(comparandoS1S2)
distancia[1] = soma(comparandoS1D1)
distancia[2] = soma(comparandoS1D2)
distancia[3] = soma(comparandoS1D3)

menor = distancias(distancia)

#verificando qual imagem é mais parecida com S1
if(menor == distancia[0]):
	cv2.imshow("Imagem mais parecida", s2)
	cv2.waitKey(0)
elif (menor == distancia[1]):
	cv2.imshow("Imagem mais parecida", d1)
	cv2.waitKey(0)
elif (menor == distancia[2]):
	cv2.imshow("Imagem mais parecida", d2)
	cv2.waitKey(0)
else:
	cv2.imshow("Imagem mais parecida", d3)
	cv2.waitKey(0)
  
  
  # Rastreamento (Tracking) (Numero 8 )
  
  import numpy as np
import cv2

#abrindo a captura de vídeo
captura = cv2.VideoCapture("video.mp4")

#executando até o usuário fechar
while (True):
	#lendo cada quadro do vídeo e carregando em frame
	ret,frame = captura.read()

	#transformando o frame em HSV
	hsvFrame = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
	
	#intervalo de cor
	lowerBlue = np.array([100, 10, 10]) #valores mínimos
	upperBlue = np.array([160, 255, 255]) #valores máximos

	#identificação da área
	mascara = cv2.inRange(hsvFrame, lowerBlue, upperBlue)

	#pegando o contorno
	contorno, hierarchy = cv2.findContours(mascara, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

	if(contorno):
		maiorArea = cv2.contourArea(contorno[0])
		contornoMaior = 0
		j=0
		#pegando o contorno com a maior área
		for i in contorno:
			if maiorArea < cv2.contourArea(i):
				maiorArea = cv2.contourArea(i)
				contornoMaior = j
			j = j+1

		#calculando o retângulo
		x, y, w, h = cv2.boundingRect(contorno[contornoMaior])

		#fazendo o retângulo
		cv2.rectangle(frame, (x,y), (x+w, y+h), (0,0,255),3)
		#fazendo o contorno do objeto
		cv2.drawContours(frame, [contorno[contornoMaior]], 0, (0,255,0), 3)
		
		cv2.imshow("Rastreio", frame)

		if cv2.waitKey(25) & 0xFF == ord('q'):
			break

cv2.destroyAllWindows()


# Limiarização de Imagens (Numero 9)

import numpy as np
import cv2
import time

#variável, tabela ASCII associa um número a uma tecla
ESC = 27

limiar_antes =0
contador = 0
atualizado = False


#carregando a imagem
imagem = cv2.imread("Lenna.png",0)

#criando uma janela gráfica
janela = "Limiarizador com trackbar"
cv2.namedWindow(janela)

#método de alteração dos valores
def onChange(value):
	pass 

#criando trackbar (barra)
cv2.createTrackbar("Limiar", janela, 0, 255, onChange) #(nome, associação com a janela, valor inicial, valor maximo, chamada do método)

#mostrando a imagem na janela, até o usuário fechar
while True:

	#valor do trackbar naquele instante
	limiar = cv2.getTrackbarPos("Limiar", janela)

	#verificando se houve alteração da limiarização pelo usuário
	if limiar_antes != limiar:
		atualizado = True
		contador = time.time()
		limiar_antes = limiar


	#atualizando o contraste da imagem, se tiver 1 segundo desde que o usuário atualizou o trackbar
	if atualizado == True and (time.time() - contador) > 1:

		#adapativeThreshold pois a imagem pode ter diferentes condições de iluminação
		imagem = cv2.adaptiveThreshold(imagem, limiar, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY, 11, 2)
		atualizado = False

	cv2.imshow(janela, imagem)

	#fechando a imagem com ESC
	tecla = cv2.waitKey(1) & 0xFF
	if tecla == ESC:
		break
cv2.destroyAllWindows()


# Filtragem (Numero 10)

import cv2
import numpy as np
from matplotlib import pyplot as plt

#carregando a imagem e convertendo para RGB
imagem = cv2.imread('Lenna.png')
imagem = cv2.cvtColor(imagem, cv2.COLOR_BGR2RGB)

#definição da função que aplica os filtros na imagem
def filtragem (imagem,filtro):

	if (filtro == "Filtro da Média"):
		imgFiltrada = cv2.blur(imagem,(7,7))
	elif (filtro == "Filtro Gaussiano"):
		imgFiltrada = cv2.GaussianBlur(imagem,(5,5),0)
	elif (filtro == "Filtro da Mediana"):
		imgFiltrada = cv2.medianBlur(imagem,7)
	elif (filtro == "Filtro Sobel"):
		sobelX = cv2.Sobel(imagem, cv2.CV_64F, 1, 0)
		sobelY = cv2.Sobel(imagem, cv2.CV_64F, 0, 1)
		sobelX = np.uint8(np.absolute(sobelX))
		sobelY = np.uint8(np.absolute(sobelY))
		imgFiltrada = cv2.bitwise_or(sobelX,sobelY)
	elif (filtro == "Filtro Laplaciano"):
		imgFiltrada = cv2.Laplacian(imagem,cv2.CV_64F)
		imgFiltrada =np.uint8(np.absolute(imgFiltrada))
	return imgFiltrada

#chamando a função filtragem
F1=filtragem(imagem,"Filtro da Média")
F2=filtragem(imagem,"Filtro Gaussiano")
F3=filtragem(imagem,"Filtro da Mediana")
F4=filtragem(imagem,"Filtro Sobel")
F5=filtragem(imagem,"Filtro Laplaciano")

#convertendo as imagens para inteiro (código estava dando erro sem essa conversão)
f1=F1.astype('uint8')
f2=F2.astype('uint8')
f3=F3.astype('uint8')
f4=F4.astype('uint8')
f5=F5.astype('uint8')

#definição da função que faz o grid das imagens
def showMultipleImageGrid(imgsArray,titlesArray,x,y):

	fig, axis = plt.subplots(y,x)
	xId, yId, titleId = 0,0,0

	for img in imgsArray:
	    axis[yId, xId].set_title(titlesArray[titleId])
	    axis[yId, xId].imshow(img)
	    if(len(titlesArray[titleId]) == 0):
	        axis[yId, xId].axis('off')

	    titleId += 1
	    xId += 1
	    if xId == x:
	        xId = 0
	        yId += 1

	fig.tight_layout(pad=0.5)
	plt.show()

#definição da função para plotar as imagens
def plotarimagens():
	#colocando todas as imagens obtidas em um vetor
	imgsArray = [imagem,f1,f2,f3,f4,f5]
	titlesArray = ['Original','Filtro da Média', 'Filtro Gaussiano', 'Filtro da Mediana', 'Filtro Sobel', 'Filtro Laplaciano']
	showMultipleImageGrid(imgsArray,titlesArray,3,2)

def main():
	plotarimagens()

if __name__ == "__main__":
    main()

	




